swagger: "2.0"
info:
  version: "1.0.0"
  title: "Silverback"
schemes:
  - "http"
  - "https"
securityDefinitions:
  Bearer:
    name: Authorization
    type: apiKey
    in: header
    description: 'Please use the following format: Bearer <ApiKey>'
paths:
  /auth/login:
    post:
      tags:
      - "authentication"
      summary: "Login a user with email and password"
      parameters:
        - name: "authentication request"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PostLogin"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          description: "400 Bad request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "401 Unauthorised"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "500 Interal error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/logout:
    post:
      tags:
      - "authentication"
      summary: "Logout the current user"
      security:
        - Bearer: []
      responses:
        204:
          description: "Success"
        401:
          description: "401 Unauthorised"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/refresh:
    post:
      tags:
      - "authentication"
      summary: "Returns a new jwt token via refresh token"
      security:
        - Bearer: []
      parameters:
        - name: "refresh request"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PostRefresh"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/RefreshResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /forgot-password/init:
    post:
      tags:
      - "forgot password"
      summary: "Send a forgot password link to start reset process"
      parameters:
        - name: "data"
          in: "body"
          required: true
          schema:
            type: "object"
            required:
              - "email"
            properties:
              email:
                type: "string"
      responses:
        200:
          description: "Success"
        500:
          description: "500 Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /forgot-password/verify:
    get:
      tags:
      - "forgot password"
      summary: "Verify whether the reset token is still valid"
      parameters:
        - name: "token"
          description: "unique reset token"
          in: "query"
          required: true
          type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "400 Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /forgot-password/confirm:
    put:
      tags:
      - "forgot password"
      summary: "Confirm the newly choosen password"
      parameters:
        - name: "token"
          description: "unique reset token"
          in: "query"
          required: true
          type: "string"
        - name: "data"
          in: "body"
          required: true
          schema:
            type: "object"
            required:
              - "password"
            properties:
              password:
                type: "string"
      responses:
        200:
          description: "Success"
        500:
          description: "500 Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /me:
    get:
      tags:
      - "current user"
      summary: "Returns the current user information"
      security:
        - Bearer: []
      responses:
        200:
          description: "logged in user"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - "current user"
      summary: "Update the current user information"
      security:
        - Bearer: []
      parameters:
        - name: "user values"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PutUser"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /config/version:
    get:
      tags:
      - "version control"
      summary: "Returns the current build and version number of the deployed api"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiVersionCheckResponse"
        500:
          description: "500 Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /config/version/{os}:
    parameters:
      - in: path
        type: "string"
        name: os
        description: The name of the operating system.
        required: true
    get:
      tags:
      - "version control"
      summary: "Returns the current minimum and latest version for application(s)"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/VersionCheckResponse"
        500:
          description: "500 Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    get:
      tags:
      - "users"
      summary: "Returns all users"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/SortOrder"
        - $ref: "#/parameters/SortField"
        - $ref: "#/parameters/Offset"
        - $ref: "#/parameters/Limit"
        - $ref: "#/parameters/Search"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/UserListResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
      - "users"
      summary: "Create a new user"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - name: "user values"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PostUser"
        - name: "changePassword"
          in: "query"
          required: false
          type: "string"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/{userId}:
    parameters:
      - in: path
        type: "string"
        name: userId
        description: The id of the user
        required: true
    get:
      tags:
      - "users"
      summary: "Returns user by id"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - "users"
      summary: "Update an existing user"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - name: "user values"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PutUser"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      tags:
      - "users"
      summary: "Update an existing user's property"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - name: "user values"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PatchUser"
      responses:
        201:
          description: "Success"
          schema:
            $ref: "#/definitions/UserResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      tags:
      - "users"
      summary: "Delete an existing user"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      responses:
        204:
          description: "Success"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/{userId}/password:
    parameters:
      - in: path
        type: "string"
        name: userId
        description: The id of the user
        required: true
    put:
      tags:
      - "users"
      summary: "Update an existing user's password"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - name: "user values"
          in: "body"
          required: true
          schema:
            type: "object"
            required:
              - "password"
            properties:
              password:
                type: "string"
      responses:
        200:
          description: "Success"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/roles:
    get:
      tags:
      - "user roles"
      summary: "Returns all available user roles"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/UserRoleListResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /meta/codes/{codeType}:
    get:
      tags:
      - "metaOptions"
      summary: "Returns all codes for a specific code type"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/SortOrder"
        - $ref: "#/parameters/SortField"
        - $ref: "#/parameters/Offset"
        - $ref: "#/parameters/Limit"
        - $ref: "#/parameters/Search"
        - in: query
          type: "boolean"
          name: deprecated
          description: Search for codes matching deprecated value
          required: false
        - in: path
          type: "string"
          name: codeType
          description: The name of the code type
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/CodesListResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
      - "metaOptions"
      summary: "Create a new code for a specific code type"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - in: path
          type: "string"
          name: codeType
          description: The name of the code type
          required: true
        - name: "code values"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/PostCode"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/CodeResponse"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /meta/codes/{codeId}/deprecate:
    post:
      tags:
      - "metaOptions"
      summary: "Deprecate an existing code"
      description: |-
        permission | scope | effect
        - | - | -
        `ADMIN` | `gobal` | **Required** for this endpoint
      security:
        - Bearer: []
      parameters:
        - in: path
          type: "string"
          name: codeId
          description: The id of the code
          required: true
      responses:
        200:
          description: "Success"
        400:
          description: "401 Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        hasAccess:
          type: boolean
        role:
          type: string
          enum: ["USER", "ADMIN"]
    UserRole:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        description:
          type: string
        level:
          type: number
    PostLogin:
      type: object
      required:
        - "username"
        - "password"
      properties:
        username:
          type: string
        password:
          type: string
        deviceId:
          type: string
    PostRefresh:
      type: object
      required:
        - "refreshToken"
      properties:
        refreshToken:
          type: string
    PostUser:
      type: object
      required:
        - "email"
        - "firstName"
        - "lastName"
        - "hasAccess"
        - "role"
        - "password"
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        hasAccess:
          type: boolean
        role:
          type: string
          enum: ["USER", "ADMIN"]
    PutUser:
      type: object
      required:
        - "email"
        - "firstName"
        - "lastName"
        - "role"
        - "hasAccess"
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        hasAccess:
          type: boolean
        role:
          type: string
          enum: ["USER", "ADMIN"]
    PatchUser:
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        hasAccess:
          type: boolean
        role:
          type: string
          enum: ["USER", "ADMIN"]
    LoginResponse:
      type: object
      properties:
        meta:
          type: object
        data:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
    RefreshResponse:
      type: object
      properties:
        meta:
          type: object
        data:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
    UserResponse:
      type: object
      properties:
        meta:
          type: object
        data:
          $ref: "#/definitions/User"
    UserListResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: number
              example: 50
            totalCount:
              type: number
              example: 120
        data:
          type: array
          items:
            $ref: "#/definitions/User"
    UserRoleListResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: number
              example: 50
            totalCount:
              type: number
              example: 120
        data:
          type: array
          items:
            $ref: "#/definitions/UserRole"
    Code:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        name:
          type: string
        description:
          type: string
        deprecated:
          type: boolean
    PostCode:
      type: object
      required:
        - "name"
        - "code"
      properties:
        name:
          type: string
          description: "Full name"
        code:
          type: string
          description: "Unique identifier"
        description:
          type: string
    CodeResponse:
      type: object
      properties:
        meta:
          type: object
        data:
          $ref: "#/definitions/Code"
    CodesListResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: number
              example: 50
            totalCount:
              type: number
              example: 120
        data:
          type: array
          items:
            $ref: "#/definitions/Code"
    VersionCheckResponse:
      type: object
      properties:
        meta:
          type: object
        data:
          type: object
          properties:
            minVersion:
              type: string
              example: '1.4.0'
            latestVersion:
              type: string
              example: '1.8.0'
    ApiVersionCheckResponse:
      type: object
      properties:
        meta:
          type: object
        data:
          type: object
          properties:
            build:
              type: string
              example: 'v51'
            version:
              type: string
              example: '1.0.1'
    ErrorResponse:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: 'Unique id per error'
          status:
            type: number
            description: 'Http statuscode'
            example: 400
          code:
            type: string
            description: 'Unique code per error'
            example: 'NO_VALID_USERNAME'
          title:
            type: string
            description: 'General error message'
            example: 'No valid username provided'
          detail:
            type: string
            description: 'Extra details (optional)'
          meta:
            type: object
            properties:
              stack:
                type: string
                description: 'Stacktrace (only for development purposes)'
parameters:
  SortOrder:
    in: query
    type: "string"
    name: sortOrder
    enum: [asc, desc]
    default: asc
    description: Order of the field to sort by (ascending or descending)
    required: false
  SortField:
    in: query
    type: "string"
    name: sortField
    description: Field to sort the results by
    required: false
  Limit:
    in: query
    type: "number"
    name: limit
    description: Number of items to retrieve
    required: false
  Offset:
    in: query
    type: "number"
    name: offset
    description: Offset for the number of items to retrieve
    required: false
  Search:
    in: query
    type: "string"
    name: search
    description: Search for items matching this string (fuzzy search)
    required: false

